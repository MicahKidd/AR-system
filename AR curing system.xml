<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>ar</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>ars</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>information captures</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>new cureset capture</name>
						<script>ars.myCureset = matches[2]</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^You will now cure using the (\S+) set\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
			</TriggerGroup>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>AR family</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Curing system</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Cureset config</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<AliasGroup isActive="yes" isFolder="yes">
						<name>Cureset window</name>
						<script></script>
						<command></command>
						<packageName></packageName>
						<regex></regex>
						<Alias isActive="yes" isFolder="no">
							<name>call cureset window</name>
							<script>cmenu.main:show()</script>
							<command></command>
							<packageName></packageName>
							<regex>^ars cureset window$</regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>New alias</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
						</Alias>
						<Alias isActive="yes" isFolder="no">
							<name>New alias</name>
							<script></script>
							<command></command>
							<packageName></packageName>
							<regex></regex>
						</Alias>
					</AliasGroup>
				</AliasGroup>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>AR family</name>
			<packageName></packageName>
			<script>ar = ar or {}
ar.file = getMudletHomeDir() .. "/AR system"
if not lfs.attributes(ar.file) then
  lfs.mkdir(ar.file)
end
sendGMCP([[Core.Supports.Add ["Comm.Channel 1", "IRE.Target 1", "IRE.Rift 1"] ]])</script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>AR system</name>
				<packageName></packageName>
				<script>ars = ars or {}
ars.myClasses = ars.myClasses or {}
ars.file = ar.file .. "/curing"
if not lfs.attributes(ars.file) then
  lfs.mkdir(ars.file)
end
if io.exists(ars.file .. "/class list") then
  table.load(ars.file .. "/class list", ars.myClasses)
end
ars.toggles = ars.toggles or {}</script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>echos</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>vits echo</name>
						<packageName></packageName>
						<script>ars.vitsEcho =
  function(vit, oldvit, newvit)
    local color
    local change = newvit - oldvit
    local percent = (change / ars.myVits["max" .. vit]) * 100
    local symbol = ""
    if percent &lt; 0 then
      percent = string.cut(percent, 4)
      if vit == "mp" then
        color = "NavyBlue"
      else
        color = "ansiRed"
      end
    else
      percent = string.cut(percent, 3)
      symbol = "+"
      if vit == "mp" then
        color = "ansiLightBlue"
      else
        color = "LawnGreen"
      end
    end
    tempPromptTrigger(
      function()
        suffix("(&lt;" .. color .. "&gt;"..symbol .. change .. " " .. vit .. ", " .. percent .. "&lt;white&gt;)", cecho)
      end,
      1
    )
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>aff echo</name>
						<packageName></packageName>
						<script>ars.affEcho =
  function(event, aff)
    local color
    local colorIgnore = {"legs", "arms", "torso", "head", "passive", "tree", "body"}
    local cureColor
    if event == "ars.gotaff" then
      color = "&lt;red&gt;"
    else
      color = "&lt;green&gt;"
    end
    for k, v in pairs(ar.cureColors) do
      if table.contains(colorIgnore, k) == false and table.contains(ar.cureList[k], aff) then
        cureColor = v
        break
      end
    end
    if ars.myAffs[aff] ~= true then
      cecho(
        color ..
        "[ " ..
        cureColor ..
        "" ..
        string.upper(ar.affShortName[aff]) ..
        "&lt;white&gt;: " ..
        ars.myAffs[aff] ..
        color ..
        " ]"
      )
    elseif ars.myAffs[aff] == true then
      cecho(
        color ..
        "[ " ..
        cureColor ..
        "" ..
        string.upper(ar.affShortName[aff]) ..
        "" ..
        color ..
        " ]"
      )
    end
  end
registerAnonymousEventHandler("ars.gotaff", "ars.affEcho")
registerAnonymousEventHandler("ars.lostaff", "ars.affEcho")</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>def echo</name>
						<packageName></packageName>
						<script>ars.defEcho =
  function(event, def)
    local color
    if event == "ars.lostdef" then
      color = "&lt;red&gt;"
    else
      color = "&lt;green&gt;"
    end
    cecho(color .. "[  &lt;DeepSkyBlue&gt;" .. string.cut(def, 4) .. "  " .. color .. "]")
  end
registerAnonymousEventHandler("ars.gotdef", "ars.defEcho")
registerAnonymousEventHandler("ars.lostdef", "ars.defEcho")</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>GMCP parsers</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>curesets</name>
						<packageName></packageName>
						<script>ars.curesets = ars.curesets or {}
if io.exists(ars.file .. "/curesets") then
  table.load(ars.file .. "/curesets", ars.curesets)
end
ars.currentPrios = ars.currentPrios or {affs = {}, defs = {}}</script>
						<eventHandlerList />
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>Curing window</name>
							<packageName></packageName>
							<script>if table.is_empty(ars.myClasses) == true then
  cecho("\n&lt;red&gt; NO CLASSES LOADED.... &lt;white&gt; AR not installed, please type AR INSTALL\n")
  return
end
cmenu = cmenu or {classes = table.deepcopy(ars.myClasses)}
cmenu.curesets = cmenu.curesets or {"duel", "group", "hunting", "burst", "aeon", "custom"}
cmenu.currentTab = cmenu.currentTab or cmenu.classes[1]
cmenu.main =
  cmenu.main or
  Adjustable.Container:new(
    {
      name = "Cureset main menu",
      titleTxtColor = "white",
      x = "20%",
      y = "20%",
      height = "60%",
      width = "60%",
      titleText = "Curing options - Adjust curing settings here!",
    },
    main
  )
cmenu.cHbox =
  cmenu.cHbox or
  Geyser.HBox:new(
    {name = "Cureset class header", x = 0, y = 0, width = "100%", height = "10%"}, cmenu.main
  )
cmenu.footer =
  cmenu.footer or
  Geyser.Label:new(
    {name = "Curing menu footer", x = 0, y = "10%", width = "100%", height = "90%+1px"}, cmenu.main
  )
cmenu.miniConsole =
  cmenu.miniConsole or
  Geyser.MiniConsole:new(
    {
      name = "Cureset miniconsole",
      x = "5px",
      y = "5px",
      height = "100%-15px",
      width = "100%-10px",
      color = "black",
    },
    cmenu.footer
  )
cmenu.footer:setStyleSheet(
  [[  background-color: rgb(0,0,0);
  border-bottom-left-radius: 10px;
  border-bottom-right-radius: 10px;
    border-width: 2px;
  border-style: solid;
  border-color: rgb(0,0,70)

]]
)
for _, v in pairs(cmenu.classes) do
  cmenu[v .. "label"] =
    cmenu[v .. "label"] or
    Geyser.Label:new({name = v .. " Label", x = 0, y = 0, height = "100%"}, cmenu.cHbox)
  cmenu[v .. "label"]:echo(v:title(), "white", "cb10")
  cmenu[v .. "label"]:setStyleSheet(
    [[  background-color: rgb(0,0,0);
  border-top-left-radius: 10px;
  border-top-right-radius: 10px;
  border-width: 2px;
  border-style: solid;
  border-color: rgb(0,0,70)
]]
  )
  cmenu[v .. "label"]:setClickCallback(cmenu.classClick, v)
end
cmenu.classClick =
  function(class)
    local columns = cmenu.miniConsole:getColumnCount()
    cmenu.currentTab = class:lower()
    cmenu.miniConsole:clear()
    cmenu.miniConsole:enableCommandLine()
    for _, cset in pairs(cmenu.curesets) do
      cmenu.miniConsole:cechoLink(
        "&lt;white&gt;" .. cset,
        [[cmenu.curesetClick("]] .. cset .. [[")]],
        "Cureset options for " .. cset,
        true
      )
      cmenu.miniConsole:echo(string.rep(" ", (columns / #cmenu.curesets) - #cset))
    end
  end
cmenu.curesetClick =
  function(cureset)
    cmenu.currentCureset = cureset
    cmenu.miniConsole:clear()
    local columns = cmenu.miniConsole:getColumnCount()
    local t = {"priorities", "defup", "keepup", "curing options"}
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - (#cureset / 2))))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;" .. cureset, [[cmenu.classClick("]] .. cmenu.currentTab .. [[")]], "Back", true
    )
    cmenu.miniConsole:echo("\n")
    for _, option in pairs(t) do
      cmenu.miniConsole:cechoLink(
        "&lt;white&gt;" .. option, [[cmenu.optionClick("]] .. option .. [[")]], "adjust " .. option, true
      )
      cmenu.miniConsole:echo(string.rep(" ", (columns / #t) - #option))
    end
  end
cmenu.optionClick =
  function(option)
    local columns = cmenu.miniConsole:getColumnCount()
    cmenu.miniConsole:clear()
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - (#cmenu.currentCureset / 2))))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;" .. cmenu.currentCureset,
      [[cmenu.classClick("]] .. cmenu.currentTab .. [[")]],
      "Back",
      true
    )
    cmenu.miniConsole:echo("\n")
    if option == "priorities" then
      cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - 5)))
      cmenu.miniConsole:cechoLink(
        "&lt;white&gt;Priorities",
        [[cmenu.curesetClick("]] .. cmenu.currentCureset .. [[")]],
        "Back",
        true
      )
      local ptable = {"eat", "apply", "smoke", "health", "all"}
      cmenu.miniConsole:echo("\n")
      for _, v in pairs(ptable) do
        cmenu.miniConsole:cechoLink(
          "&lt;white&gt;" .. v,
          [[cmenu.prioClick(nil, "]] .. v .. [[")]],
          "adjust priorities for " .. v,
          true
        )
        cmenu.miniConsole:echo(string.rep(" ", (columns / #ptable) - #v))
      end
    end
    if option == "defup" then
      cmenu.defupClick()
    end
  end
cmenu.prioClick =
  function(_, group)
    cmenu.prioGroup = group
    local tbl = {}
    local stringLen = 0
    local n = n or 0
    local columns = cmenu.miniConsole:getColumnCount()
    cmenu.miniConsole:clear()
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - (#cmenu.currentCureset / 2))))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;" .. cmenu.currentCureset,
      [[cmenu.classClick("]] .. cmenu.currentTab .. [[")]],
      "Back",
      true
    )
    cmenu.miniConsole:echo("\n")
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - 5)))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;Priorities", [[cmenu.curesetClick("]] .. cmenu.currentCureset .. [[")]], "Back", true
    )
    cmenu.miniConsole:echo("\n")
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - (#group / 2))))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;" .. group, [[cmenu.optionClick("priorities")]], "Back", true
    )
    cmenu.miniConsole:echo("\n")
    for _, v in pairs(ar.affCures[group]) do
      tbl[v] = ars.curesets[cmenu.currentTab][cmenu.currentCureset].affs[v]
      if #v &gt; stringLen then
        stringLen = #v
      end
    end
    local spaceReq = math.floor(columns / (stringLen + 12))
    local spacer = (math.floor(columns / spaceReq))
    for
      aff, prio in
        spairs(
          tbl,
          function(t, a, b)
            return t[a] &lt; t[b]
          end
        )
    do
      if n &lt; spaceReq then
        cmenu.miniConsole:cecho("&lt;white&gt;" .. aff .. ": " .. prio, true)
        cmenu.miniConsole:cechoLink(
          "&lt;green&gt;  ^ ",
          [[cmenu.prioAdjust("affs", "]] .. aff .. [[", -1)]],
          "Bump " .. aff .. " up",
          true
        )
        cmenu.miniConsole:cechoLink(
          "&lt;red&gt;v",
          [[cmenu.prioAdjust("affs", "]] .. aff .. [[", 1)]],
          "Bump " .. aff .. " down",
          true
        )
        cmenu.miniConsole:echo(string.rep(" ", spacer - (#aff + #tostring(prio) + 6)))
        n = n + 1
      else
        cmenu.miniConsole:echo("\n")
        cmenu.miniConsole:cecho("&lt;white&gt;" .. aff .. ": " .. prio, true)
        cmenu.miniConsole:cechoLink(
          "&lt;green&gt;  ^ ",
          [[cmenu.prioAdjust("affs", "]] .. aff .. [[", -1)]],
          "Bump " .. aff .. " up",
          true
        )
        cmenu.miniConsole:cechoLink(
          "&lt;red&gt;v",
          [[cmenu.prioAdjust("affs", "]] .. aff .. [[", 1)]],
          "Bump " .. aff .. " down",
          true
        )
        cmenu.miniConsole:echo(string.rep(" ", spacer - (#aff + #tostring(prio) + 6)))
        n = 1
      end
    end
  end
registerAnonymousEventHandler("cmenu.prioChange", "cmenu.prioClick")
cmenu.defupClick =
  function(_)
    local columns = cmenu.miniConsole:getColumnCount()
    cmenu.miniConsole:clear()
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - (#cmenu.currentCureset / 2))))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;" .. cmenu.currentCureset,
      [[cmenu.classClick("]] .. cmenu.currentTab .. [[")]],
      "Back",
      true
    )
    cmenu.miniConsole:echo("\n")
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - 2)))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;Defup", [[cmenu.curesetClick("]] .. cmenu.currentCureset .. [[")]], "Back", true
    )
    cmenu.miniConsole:echo("\n")
    local t = cmenu.getClassDefs(cmenu.currentTab)
    local stringLen = 0
    local n = n or 0
    for _, v in pairs(ar.defList) do
      if table.contains(t, v) then
        if stringLen &lt; #v then
          stringLen = #v
        end
      end
    end
    local spaceReq = math.floor(columns / (stringLen + 6))
    local spacer = (math.floor(columns / spaceReq))
    for group, _ in pairs(t) do
      n = 0
      cmenu.miniConsole:echo("\n\n")
      cmenu.miniConsole:cecho(
        string.rep(" ", math.floor((columns / 2) - math.floor(#group / 2))) .. "&lt;gold&gt;" .. group,
        true
      )
      cmenu.miniConsole:echo("\n")
      for _, def in pairs(t[group]) do
        n = n + 1
        if n &gt;= spaceReq then
          cmenu.miniConsole:echo("\n")
          n = 1
        end
        cmenu.miniConsole:cecho("&lt;white&gt;" .. def, true)
        cmenu.miniConsole:echo(string.rep(" ", spacer - (#def + 3)))
        if
          table.contains(ars.curesets[cmenu.currentTab][cmenu.currentCureset].defup, def) == true
        then
          cmenu.miniConsole:cechoLink(
            "&lt;SkyBlue&gt;[&lt;red&gt;X&lt;SkyBlue&gt;]",
            [[table.remove(ars.curesets["]] ..
            cmenu.currentTab ..
            [["]["]] ..
            cmenu.currentCureset ..
            [["].defup, 
              
              
              table.index_of(ars.curesets["]] ..
            cmenu.currentTab ..
            [["]["]] ..
            cmenu.currentCureset ..
            [["].defup, "]] ..
            def ..
            [[")
              
              ) raiseEvent("cmenu.defup")]],
            "remove " .. def .. " from defup",
            true
          )
        else
          cmenu.miniConsole:cechoLink(
            "&lt;SkyBlue&gt;[ ]",
            [[table.insert(ars.curesets["]] ..
            cmenu.currentTab ..
            [["]["]] ..
            cmenu.currentCureset ..
            [["].defup, "]] ..
            def ..
            [[") raiseEvent("cmenu.defup")]],
            "add " .. def .. " to defup",
            true
          )
        end
        cmenu.miniConsole:echo("   ")
      end
    end
    table.save(ars.file .. "/curesets", ars.curesets)
  end
registerAnonymousEventHandler("cmenu.defup", "cmenu.defupClick")
cmenu.keepupClick =
  function(group)
  end
cmenu.optionsClick =
  function()
  end
cmenu.prioAdjust =
  function(arg1, arg2, num)
    local eventGroup
    if arg1 == "affs" then
      ars.curesets[cmenu.currentTab:lower()][cmenu.currentCureset][arg1][arg2] =
        ars.curesets[cmenu.currentTab:lower()][cmenu.currentCureset][arg1][arg2] + num
      table.save(ars.file .. "/curesets", ars.curesets)
      raiseEvent("cmenu.prioChange", cmenu.prioGroup)
    end
  end</script>
							<eventHandlerList />
							<Script isActive="yes" isFolder="no">
								<name>metamorphosis defup selector</name>
								<packageName></packageName>
								<script>ars.getMorph =
  function()
    local t = {}
    local bestMorph = {}
    for _, def in pairs(ars.curesets[ars.myInfo.class][ars.myCureset].defup) do
      for morph, defs in pairs(ar.subClassDefs.sentinel) do
        t[morph] = t[morph] or 0
        if table.contains(defs, def) == true then
          t[morph] = t[morph] + 1
        end
      end
    end
    for
      k, v in
        spairs(
          tbl,
          function(t, b, a)
            return t[a] &lt; t[b]
          end
        )
    do
      if ar.mySkills.metamorphosis[k] == true then
        table.insert(bestMorph, k)
      end
    end
    return tostring(bestMorph[1])
  end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>get class defs</name>
								<packageName></packageName>
								<script>cmenu.getClassDefs =
  function(class)
    local t =
      {
        ["curatives"] = table.deepcopy(ar.classDefs.curatives),
        ["tattoos"] = table.deepcopy(ar.classDefs.tattoos),
        ["resistances"] = table.deepcopy(ar.classDefs.resistances),
        ["survival"] = table.deepcopy(ar.classDefs.survival),
        ["vision"] = table.deepcopy(ar.classDefs.vision),
        ["artefacts"] = table.deepcopy(ar.classDefs.artefacts),
        [class] = {},
      }
    local sub
    for _, v in pairs(ar.classDefs[class]) do
      table.insert(t[class], v)
    end
    if class == "alchemist" then
      if table.contains(gmcp.Char.Skills.Groups, "formulation") then
        sub = "formulation"
      elseif table.contains(gmcp.Char.Skills.Groups, "sublimation") then
        sub = "sublimation"
      end
    end
    if class == "monk" then
      if table.contains(gmcp.Char.Skills.Groups, "tekura") then
        sub = "tekura"
      elseif table.contains(gmcp.Char.Skills.Groups, "shikudo") then
        sub = "shikudo"
      end
    end
    if class == "paladin" or class == "infernal" or class == "runewarden" then
      if ar.mySkills and ar.mySkills.weaponmastery then
        if ar.mySkills.weaponmastery.mastery then
          sub = "dual-wield cutting"
        elseif ar.mySkills.weaponmastery.deflect then
          sub = "two-handed"
        end
      end
    end
    if class == "sentinel" or class == "druid" then
      for morph, _ in pairs(ar.subClassDefs[class]) do
        for i = 1, #ar.subClassDefs[class][morph] do
          def = ar.subClassDefs[class][morph][i]
          if table.contains(t[class], def) == false then
            table.insert(t[class], def)
          end
        end
      end
    end
    if sub then
      for _, v in pairs(ar.subClassDefs[sub]) do
        table.insert(t[class], v)
      end
    end
    return t
  end</script>
								<eventHandlerList />
							</Script>
							<Script isActive="yes" isFolder="no">
								<name>click functions</name>
								<packageName></packageName>
								<script>cmenu.classClick =
  function(class)
    local columns = cmenu.miniConsole:getColumnCount()
    cmenu.currentTab = class:lower()
    cmenu.miniConsole:clear()
    cmenu.miniConsole:enableCommandLine()
    for _, cset in pairs(cmenu.curesets) do
      cmenu.miniConsole:cechoLink(
        "&lt;white&gt;" .. cset,
        [[cmenu.curesetClick("]] .. cset .. [[")]],
        "Cureset options for " .. cset,
        true
      )
      cmenu.miniConsole:echo(string.rep(" ", (columns / #cmenu.curesets) - #cset))
    end
  end
cmenu.curesetClick =
  function(cureset)
    cmenu.currentCureset = cureset
    cmenu.miniConsole:clear()
    local columns = cmenu.miniConsole:getColumnCount()
    local t = {"priorities", "defup", "keepup", "curing options"}
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - (#cureset / 2))))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;" .. cureset, [[cmenu.classClick("]] .. cmenu.currentTab .. [[")]], "Back", true
    )
    cmenu.miniConsole:echo("\n")
    for _, option in pairs(t) do
      cmenu.miniConsole:cechoLink(
        "&lt;white&gt;" .. option, [[cmenu.optionClick("]] .. option .. [[")]], "adjust " .. option, true
      )
      cmenu.miniConsole:echo(string.rep(" ", (columns / #t) - #option))
    end
  end
cmenu.optionClick =
  function(option)
    local columns = cmenu.miniConsole:getColumnCount()
    cmenu.miniConsole:clear()
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - (#cmenu.currentCureset / 2))))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;" .. cmenu.currentCureset,
      [[cmenu.classClick("]] .. cmenu.currentTab .. [[")]],
      "Back",
      true
    )
    cmenu.miniConsole:echo("\n")
    if option == "priorities" then
      cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - 5)))
      cmenu.miniConsole:cechoLink(
        "&lt;white&gt;Priorities",
        [[cmenu.curesetClick("]] .. cmenu.currentCureset .. [[")]],
        "Back",
        true
      )
      local ptable = {"eat", "apply", "smoke", "health", "all"}
      cmenu.miniConsole:echo("\n")
      for _, v in pairs(ptable) do
        cmenu.miniConsole:cechoLink(
          "&lt;white&gt;" .. v,
          [[cmenu.prioClick(nil, "]] .. v .. [[")]],
          "adjust priorities for " .. v,
          true
        )
        cmenu.miniConsole:echo(string.rep(" ", (columns / #ptable) - #v))
      end
    end
    if option == "defup" then
      cmenu.defupClick()
    end
  end
cmenu.prioClick =
  function(_, group)
    cmenu.prioGroup = group
    local tbl = {}
    local stringLen = 0
    local n = n or 0
    local columns = cmenu.miniConsole:getColumnCount()
    cmenu.miniConsole:clear()
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - (#cmenu.currentCureset / 2))))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;" .. cmenu.currentCureset,
      [[cmenu.classClick("]] .. cmenu.currentTab .. [[")]],
      "Back",
      true
    )
    cmenu.miniConsole:echo("\n")
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - 5)))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;Priorities", [[cmenu.curesetClick("]] .. cmenu.currentCureset .. [[")]], "Back", true
    )
    cmenu.miniConsole:echo("\n")
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - (#group / 2))))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;" .. group, [[cmenu.optionClick("priorities")]], "Back", true
    )
    cmenu.miniConsole:echo("\n")
    for _, v in pairs(ar.affCures[group]) do
      tbl[v] = ars.curesets[cmenu.currentTab][cmenu.currentCureset].affs[v]
      if #v &gt; stringLen then
        stringLen = #v
      end
    end
    local spaceReq = math.floor(columns / (stringLen + 12))
    local spacer = (math.floor(columns / spaceReq))
    for
      aff, prio in
        spairs(
          tbl,
          function(t, a, b)
            return t[a] &lt; t[b]
          end
        )
    do
      if n &lt; spaceReq then
        cmenu.miniConsole:cecho("&lt;white&gt;" .. aff .. ": " .. prio, true)
        cmenu.miniConsole:cechoLink(
          "&lt;green&gt;  ^ ",
          [[cmenu.prioAdjust("affs", "]] .. aff .. [[", -1)]],
          "Bump " .. aff .. " up",
          true
        )
        cmenu.miniConsole:cechoLink(
          "&lt;red&gt;v",
          [[cmenu.prioAdjust("affs", "]] .. aff .. [[", 1)]],
          "Bump " .. aff .. " down",
          true
        )
        cmenu.miniConsole:echo(string.rep(" ", spacer - (#aff + #tostring(prio) + 6)))
        n = n + 1
      else
        cmenu.miniConsole:echo("\n")
        cmenu.miniConsole:cecho("&lt;white&gt;" .. aff .. ": " .. prio, true)
        cmenu.miniConsole:cechoLink(
          "&lt;green&gt;  ^ ",
          [[cmenu.prioAdjust("affs", "]] .. aff .. [[", -1)]],
          "Bump " .. aff .. " up",
          true
        )
        cmenu.miniConsole:cechoLink(
          "&lt;red&gt;v",
          [[cmenu.prioAdjust("affs", "]] .. aff .. [[", 1)]],
          "Bump " .. aff .. " down",
          true
        )
        cmenu.miniConsole:echo(string.rep(" ", spacer - (#aff + #tostring(prio) + 6)))
        n = 1
      end
    end
  end
registerAnonymousEventHandler("cmenu.prioChange", "cmenu.prioClick")
cmenu.defupClick =
  function(_)
    local columns = cmenu.miniConsole:getColumnCount()
    cmenu.miniConsole:clear()
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - (#cmenu.currentCureset / 2))))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;" .. cmenu.currentCureset,
      [[cmenu.classClick("]] .. cmenu.currentTab .. [[")]],
      "Back",
      true
    )
    cmenu.miniConsole:echo("\n")
    cmenu.miniConsole:echo(string.rep(" ", math.floor((columns / 2) - 2)))
    cmenu.miniConsole:cechoLink(
      "&lt;white&gt;Defup", [[cmenu.curesetClick("]] .. cmenu.currentCureset .. [[")]], "Back", true
    )
    cmenu.miniConsole:echo("\n")
    local t = cmenu.getClassDefs(cmenu.currentTab)
    local stringLen = 0
    local n = n or 0
    for _, v in pairs(ar.defList) do
      if table.contains(t, v) then
        if stringLen &lt; #v then
          stringLen = #v
        end
      end
    end
    local spaceReq = math.floor(columns / (stringLen + 6))
    local spacer = (math.floor(columns / spaceReq))
    for group, _ in pairs(t) do
      n = 0
      cmenu.miniConsole:echo("\n\n")
      cmenu.miniConsole:cecho(
        string.rep(" ", math.floor((columns / 2) - math.floor(#group / 2))) .. "&lt;gold&gt;" .. group,
        true
      )
      cmenu.miniConsole:echo("\n")
      for _, def in pairs(t[group]) do
        n = n + 1
        if n &gt;= spaceReq then
          cmenu.miniConsole:echo("\n")
          n = 1
        end
        cmenu.miniConsole:cecho("&lt;white&gt;" .. def, true)
        cmenu.miniConsole:echo(string.rep(" ", spacer - (#def + 3)))
        if
          table.contains(ars.curesets[cmenu.currentTab][cmenu.currentCureset].defup, def) == true
        then
          cmenu.miniConsole:cechoLink(
            "&lt;SkyBlue&gt;[&lt;red&gt;X&lt;SkyBlue&gt;]",
            [[table.remove(ars.curesets["]] ..
            cmenu.currentTab ..
            [["]["]] ..
            cmenu.currentCureset ..
            [["].defup, 
              
              
              table.index_of(ars.curesets["]] ..
            cmenu.currentTab ..
            [["]["]] ..
            cmenu.currentCureset ..
            [["].defup, "]] ..
            def ..
            [[")
              
              ) raiseEvent("cmenu.defup")]],
            "remove " .. def .. " from defup",
            true
          )
        else
          cmenu.miniConsole:cechoLink(
            "&lt;SkyBlue&gt;[ ]",
            [[table.insert(ars.curesets["]] ..
            cmenu.currentTab ..
            [["]["]] ..
            cmenu.currentCureset ..
            [["].defup, "]] ..
            def ..
            [[") raiseEvent("cmenu.defup")]],
            "add " .. def .. " to defup",
            true
          )
        end
        cmenu.miniConsole:echo("   ")
      end
    end
    table.save(ars.file .. "/curesets", ars.curesets)
  end
registerAnonymousEventHandler("cmenu.defup", "cmenu.defupClick")
cmenu.keepupClick =
  function(group)
  end
cmenu.optionsClick =
  function()
  end
cmenu.prioAdjust =
  function(arg1, arg2, num)
    local eventGroup
    if arg1 == "affs" then
      ars.curesets[cmenu.currentTab:lower()][cmenu.currentCureset][arg1][arg2] =
        ars.curesets[cmenu.currentTab:lower()][cmenu.currentCureset][arg1][arg2] + num
      table.save(ars.file .. "/curesets", ars.curesets)
      raiseEvent("cmenu.prioChange", cmenu.prioGroup)
    end
  end</script>
								<eventHandlerList />
							</Script>
						</ScriptGroup>
						<ScriptGroup isActive="yes" isFolder="yes">
							<name>prio swaps</name>
							<packageName></packageName>
							<script></script>
							<eventHandlerList />
						</ScriptGroup>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>vitals/stats</name>
						<packageName></packageName>
						<script>ars.myInfo = ars.myInfo or {}

ars.myCharStats = ars.myCharStats or {}</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>info status</name>
							<packageName></packageName>
							<script>ars.infoStatus =
  function()
    for k, v in pairs(gmcp.Char.Status) do
      if k == "class" and  v:lower() ~= ars.myInfo.class or ars.myInfo.class == nil then
        raiseEvent("ars.changeClass", v:lower())
        ars.myInfo = {}
      end
      if string.find(v, "%w+") == nil then
        ars.myInfo[k] = tonumber(v)
      else
        ars.myInfo[k] = v:lower()
      end
    end
  end
  registerAnonymousEventHandler("gmcp.Char.Status","ars.infoStatus") </script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>info vitals</name>
							<packageName></packageName>
							<script>ars.infoVitals =
  function()
    local t1 = {}
    if ars.myVits then
      t1 = table.deepcopy(ars.myVits)
    end
    local t2 = {}
    for k, v in pairs(gmcp.Char.Vitals) do
      if k ~= "charstats" or k ~= "vote" then
        if k == "string" then
          t2[k] = v
        else
          t2[k] = tonumber(v)
        end
      end
    end
    if not ars.myVits then
      ars.myVits = table.deepcopy(t2)
    end
    if t1.vote then
      t1.vote = nil
    end
    if ars.myVits.vote then
      ars.myVits.vote = nil
    end
    if t2.vote then
      t2.vote = nil
    end
    if table.is_empty(t1) == false then
      for k, v in pairs(t1) do
        if t2[k] ~= v then
          if k == "hp" or k == "mp" then
            ars.vitsEcho(k, t1[k], t2[k])
          end
          if t2[k] &gt; v then
            raiseEvent("ars.got" .. k, t2[k])
          elseif t2[k] &lt; v then
            raiseEvent("ars.lost" .. k, t2[k])
          end
          ars.myVits[k] = t2[k]
        end
      end
    end
  end
registerAnonymousEventHandler("gmcp.Char.Vitals", "ars.infoVitals")</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>info charstats</name>
							<packageName></packageName>
							<script>ars.infoCharStats =
  function()
    local t = {}
    for k, v in pairs(gmcp.Char.Vitals.charstats) do
      for vit, var in string.gmatch(v, "(%w+): (.*)") do
        vit = vit:lower()
        table.insert(t, vit)
        if string.find(var, "%d+") then
          var = tonumber(var)
          if not ars.myCharStats[vit] then
            ars.myCharStats[vit] = var
          end
          if ars.myCharStats[vit] ~= var then
            if ars.myCharStats[vit] &lt; var then
              raiseEvent("ars.got" .. vit, var)
            elseif ars.myCharStats[vit] &gt; var then
              raiseEvent("ars.lost" .. vit, var)
            end
            ars.myCharStats[vit] = var
          end
        else
          var = var:lower()
          if not ars.myCharStats[vit] then
            ars.myCharStats[vit] = var
          end
          if ars.myCharStats[vit] ~= var then
            ars.myCharStats[vit] = var
            raiseEvent("ars.change" .. vit, var)
          end
        end
      end
    end
    for k, v in pairs(ars.myCharStats) do
      if table.contains(t, k) == false then
        ars.myCharStats[k] = nil
      end
    end
  end
registerAnonymousEventHandler("gmcp.Char.Vitals", "ars.infoCharStats")</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>afflictions</name>
						<packageName></packageName>
						<script>ars.myAffs = ars.myAffs or {}
ars.ignoreAffs = {"blindness", "deafness", "insomnia"}</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>got affliction</name>
							<packageName></packageName>
							<script>ars.gotAff =
  function()
    for aff, count in rex.gmatch(gmcp.Char.Afflictions.Add.name, [[(\w+)(?:\s\((\d+)\))?]]) do
      if table.contains(ars.ignoreAffs, aff) then
        return
      end
      if count then
        ars.myAffs[aff] = tonumber(count)
      else
        ars.myAffs[aff] = true
      end
      raiseEvent("ars.gotaff", aff)
    end
  end
registerAnonymousEventHandler("gmcp.Char.Afflictions.Add", "ars.gotAff")</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>lost affliction</name>
							<packageName></packageName>
							<script>ars.lostAff =
  function()
    for aff, count in rex.gmatch(gmcp.Char.Afflictions.Remove[1], [[(\w+)(?:\s\((\d+)\))?]]) do
      if table.contains(ars.ignoreAffs, aff) then
        return
      end
      if count then
        ars.myAffs[aff] = ars.myAffs[aff] - tonumber(count)
        if ars.myAffs[aff] == 0 then
          ars.myAffs[aff] = nil
        end
      else
        ars.myAffs[aff] = nil
      end
      raiseEvent("ars.lostaff", aff)
    end
  end
registerAnonymousEventHandler("gmcp.Char.Afflictions.Remove", "ars.lostAff")</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>diagnose</name>
							<packageName></packageName>
							<script>ars.diagnose =
  function()
    local t = {}
    for i = 1, #gmcp.Char.Afflictions.List do
      for aff, count in rex.gmatch(gmcp.Char.Afflictions.List[i].name, [[(\w+)(?:\s\((\d+)\))?]]) do
        if table.contains(ars.ignoreAffs, aff) == false then
          if count then
            t[aff] = tonumber(count)
          else
            t[aff] = true
          end
        end
      end
    end
    ars.myAffs = table.deepcopy(t)
  end
registerAnonymousEventHandler("gmcp.Char.Afflictions.List", "ars.diagnose")</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>affliction stack counter</name>
							<packageName></packageName>
							<script>ars.myAffsCount =
  function(affs)
    local n = 0
    for aff in string.gmatch(affs, "%w+") do
      if ars.myAffs[aff] then
        n = n + 1
      end
    end
    return n
  end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>defences</name>
						<packageName></packageName>
						<script>ars.myDefs = ars.myDefs or {}</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>got defence</name>
							<packageName></packageName>
							<script>ars.gotDef =
  function()
    for def, arg in rex.gmatch(gmcp.Char.Defences.Add.name, [[(\w+)(?:\s\((.*)\))?]]) do
      if arg then
        ars.myDefs[def] = arg
      else
        ars.myDefs[def] = true
      end
      if ars.curesets[ars.myInfo.class][ars.myCureset].keepup[def] then
        send(
          "curing priority defence " ..
          def ..
          " " ..
          ars.curesets[ars.myInfo.class][ars.myCureset].keepup[def]
        )
      else
        send("curing priority defence " .. def .. " reset")
      end
      raiseEvent("ars.gotdef", def)
    end
    for _, v in pairs(ars.curesets[ars.myInfo.class][ars.myCureset].defup) do
      if not ars.myDefs[v] then
        return
      end
      ars.toggles.deffingUp = nil
    end
  end
registerAnonymousEventHandler("gmcp.Char.Defences.Add", "ars.gotDef")</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>lost defence</name>
							<packageName></packageName>
							<script>ars.lostDef =
  function()
    for def, arg in rex.gmatch(gmcp.Char.Defences.Remove[1], [[(\w+).*]]) do
      ars.myDefs[def] = nil
      raiseEvent("ars.lostdef", def)
    end
  end
registerAnonymousEventHandler("gmcp.Char.Defences.Remove", "ars.lostDef")</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>defences</name>
							<packageName></packageName>
							<script>ars.defences =
  function()
    local t = {}
    for i = 1, #gmcp.Char.Defences.List do
      for def, arg in rex.gmatch(gmcp.Char.Defences.List[i].name, [[(\w+)(?:\s\((.*)\))?]]) do
        if arg then
          t[def] = arg
        else
          t[def] = true
        end
      end
    end
    ars.myDefs = table.deepcopy(t)
  end
registerAnonymousEventHandler("gmcp.Char.Defences.List", "ars.defences")</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>defenses</name>
					<packageName></packageName>
					<script>ars.defs = ars.defs or {}</script>
					<eventHandlerList />
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>functions</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>pause/unpause curing</name>
						<packageName></packageName>
						<script>ars.pause =
  function(bool)
    ars.toggles.paused = bool
    if bool == true then
      send("curing off")
    else
      send("curing on")
    end
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>unpause on events</name>
						<packageName></packageName>
						<script>ars.unpauseOnEvent =
  function(_)
    ars.pause(false)
  end
registerAnonymousEventHandler("ars.changemorph", "ars.unpauseOnEvent")</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<VariablePackage>
		<HiddenVariables />
	</VariablePackage>
</MudletPackage>
