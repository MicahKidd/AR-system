<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>ar</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>arc</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>builders</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>get all afflictions</name>
						<script>t = {}</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>2</conditonLineDelta>
						<mStayOpen>999</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>All afflictions</string>
							<string>------------------------------------------------</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>0</integer>
							<integer>0</integer>
						</regexCodePropertyList>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>end</name>
							<script>setTriggerStayOpen("get all afflictions", 0)
for _, v in pairs(t) do send("whatcures "..v) end
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string></string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>7</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>get</name>
							<script>table.insert(t, matches[2]:lower())
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\w+)$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>whatcures</name>
						<script>x =
  x or
  {
    eat = {},
    apply = {},
    smoke = {},
    time = {},
    unknown = {},
    focus = {},
    writhe = {},
    compose = {},
    immunity = {},
    wake = {},
    concentrate = {},
  }
if string.find(matches[3], "Eat") then
  table.insert(x.eat, matches[2]:lower())
end
if string.find(matches[3], "Apply") then
  table.insert(x.apply, matches[2]:lower())
end
if string.find(matches[3], "Smoke") then
  table.insert(x.smoke, matches[2]:lower())
end
if string.find(matches[3], "Time") then
  table.insert(x.time, matches[2]:lower())
end
if string.find(matches[3], "Unknown") or string.find(matches[3], "has no known cures") then
  table.insert(x.unknown, matches[2]:lower())
end
if string.find(matches[3], "Focus") then
  table.insert(x.focus, matches[2]:lower())
end
if string.find(matches[3], "Compose") then
  table.insert(x.compose, matches[2]:lower())
end
if string.find(matches[3], "Immunity") then
  table.insert(x.immunity, matches[2]:lower())
end
if string.find(matches[3], "Writhe") then
  table.insert(x.writhe, matches[2]:lower())
end
if string.find(matches[3], "Wake") then
  table.insert(x.wake, matches[2]:lower())
end
if string.find(matches[3], "Concentrate") then
  table.insert(x.concentrate, matches[2]:lower())
end
if table.contains(x, matches[2]) == false then
  y = y or {}
  y[matches[2]] = true
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^The affliction '(\S+)' (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
				</TriggerGroup>
				<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>curing</name>
					<script></script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList />
					<regexCodePropertyList />
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>eat</name>
						<script>for k, v in pairs(arc.cureList) do
  if string.find(matches[3], k) then
    arc.cures.eat(matches[2], k)
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\S+) eats (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>apply</name>
						<script>for k, v in pairs(arc.cureList) do
  if string.find(matches[3], k) then
    arc.cures.salve(matches[2], k)
  end
end</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\S+) takes some salve from a vial and rubs it on (?:his|her) (.*)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>smoke</name>
						<script>arc.cures.smoke(matches[2], "smoke")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\S+) takes a long drag off (?:his|her) pipe\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>focus</name>
						<script>arc.cures.focus(matches[2], "focus")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^A look of extreme focus crosses the face of (\S+)\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>tree</name>
						<script>arc.cures.tree(matches[2], "tree")</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\S+) touches a tree of life tattoo\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>passive</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^A soft chiming emanates from (\S+)\.$</string>
							<string>^The guardian angel of (\S+) shimmers and \w+ gives a sigh of relief\.$</string>
							<string>^A gentle glow surrounds (\S+)\.$</string>
							<string>^A rune like a rising sun upon the ground flares, bathing (\S+) with healing magic\.$</string>
							<string>^A song can be heard on the edge of hearing as the air distorts about (\S+)\.$</string>
							<string>^A demonic crimson glow emanates from (\S+)\.$</string>
							<string>^The tempestuous form of (\S+) is cleansed by a purifying breeze\.$</string>
							<string>^(\S+) is surrounded in a cool, refreshing mist\.$</string>
							<string>^The globe of light illuminates (\S+) with its brilliance\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>concentrate</name>
						<script>arc.cures.concentrate(matches[2])</script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList>
							<string>^(\S+)'s eyes lose their focus suddenly\.$</string>
						</regexCodeList>
						<regexCodePropertyList>
							<integer>1</integer>
						</regexCodePropertyList>
					</Trigger>
					<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>writhe</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
					</Trigger>
					<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
						<name>actives</name>
						<script></script>
						<triggerType>0</triggerType>
						<conditonLineDelta>0</conditonLineDelta>
						<mStayOpen>0</mStayOpen>
						<mCommand></mCommand>
						<packageName></packageName>
						<mFgColor>#ff0000</mFgColor>
						<mBgColor>#ffff00</mBgColor>
						<mSoundFile></mSoundFile>
						<colorTriggerFgColor>#000000</colorTriggerFgColor>
						<colorTriggerBgColor>#000000</colorTriggerBgColor>
						<regexCodeList />
						<regexCodePropertyList />
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>eruption</name>
							<script>arc.activeHeals.eruption(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Magma erupts forth from beneath the plates that cover (\S+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>might</name>
							<script>arc.activeHeals.might(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\S+) lets out a mighty roar\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>slough</name>
							<script>arc.activeHeals.slough(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The fiery outer layers of (\S+) fall away, turning to dust as they drift to the ground. Though \S+ seems diminished for an instant, \w+ fires soon rage with fury once more\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>fool</name>
							<script>arc.activeHeals.fool(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\S+) presses a tarot to (?:her|his) forehead, producing a wan smile\.$</string>
								<string>^\S+ presses a tarot to (\S+)\'s forehead, producing a wan smile\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="yes" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>accelerate</name>
							<script>awho = matches[2]</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>10</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^A look of relief comes over (\S+) as \w+ grows less pale\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>accelerate - end</name>
								<script>arc.activeHeals.accelerate(awho)
awho = nil
</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string></string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>7</integer>
								</regexCodePropertyList>
							</Trigger>
							<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
								<name>boosted</name>
								<script>arc.track[matches[2]].info.boosted = true</script>
								<triggerType>0</triggerType>
								<conditonLineDelta>0</conditonLineDelta>
								<mStayOpen>0</mStayOpen>
								<mCommand></mCommand>
								<packageName></packageName>
								<mFgColor>#ff0000</mFgColor>
								<mBgColor>#ffff00</mBgColor>
								<mSoundFile></mSoundFile>
								<colorTriggerFgColor>#000000</colorTriggerFgColor>
								<colorTriggerBgColor>#000000</colorTriggerBgColor>
								<regexCodeList>
									<string>^(\S+) grows older before your eyes\.$</string>
								</regexCodeList>
								<regexCodePropertyList>
									<integer>1</integer>
								</regexCodePropertyList>
							</Trigger>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>daina</name>
							<script>arc.activeHeals.daina(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^A pale mist begins to rise from the skin of (\S+)\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>alleviate</name>
							<script>arc.activeHeal.alleviate(matches[2])
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^As (?:he|she) massages key pressure points, a look of relief comes over (\S+)'s face as (?:her|his) ailments ease\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>fitness</name>
							<script>arc.activeHeals.fitness(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\S+) draws a deep, measured breath\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>dragonheal</name>
							<script>arc.activeHeals.dragonheal(matches[2])
</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\S++) lets out a great keening, casting the impurities from (?:her|his) form\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>purify</name>
							<script>arc.activeHeals.purify(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^The amorphous form of (\S+) trembles\, some of the liquid composing it falling away from the greater whole\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>shrug</name>
							<script>arc.activeHeals.shrug(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\S+) hunches (?:her|his) shoulders and lets out a soft hiss\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>rage</name>
							<script>arc.activeHeals.rage(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\S+)'s eyes flash with rage\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>bloodboil</name>
							<script>arc.activeHeals.bloodboil(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^Perspiration suddenly breaks out on (\S+)\'s forehead\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
						<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
							<name>salt</name>
							<script>arc.activeHeals.salt(matches[2])</script>
							<triggerType>0</triggerType>
							<conditonLineDelta>0</conditonLineDelta>
							<mStayOpen>0</mStayOpen>
							<mCommand></mCommand>
							<packageName></packageName>
							<mFgColor>#ff0000</mFgColor>
							<mBgColor>#ffff00</mBgColor>
							<mSoundFile></mSoundFile>
							<colorTriggerFgColor>#000000</colorTriggerFgColor>
							<colorTriggerBgColor>#000000</colorTriggerBgColor>
							<regexCodeList>
								<string>^(\S+) sketches out a symbol in the air with (?:her|his) finger in the shape of a bisected circle\.$</string>
							</regexCodeList>
							<regexCodePropertyList>
								<integer>1</integer>
							</regexCodePropertyList>
						</Trigger>
					</TriggerGroup>
				</TriggerGroup>
			</TriggerGroup>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>AR family</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Offensive system</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>targeting</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>setup/clear target list</name>
						<script>local tempString = ""
local r = {}
local tbl = {}
local ctable = {}
if matches[2] == "clear" then
  arc.targeting.clearTargetList()
  send("unenemy all")
else
  for name in string.gmatch(matches[2], "(%w+)") do
    name = name:title()
    if not arn.people[name] then
      for _, ppl in pairs(arn.who) do
        if
          string.starts(ppl, name) and
          arn.people[ppl] and
          arn.people[ppl].city and
          arn.people[ppl].city ~= arn.people[ars.myInfo.name:title()].city
        then
          table.insert(tbl, ppl)
        end
      end
    elseif arn.people[name] then
      tempString = tempString .. name .. " "
    end
  end
  if #tbl &gt; 0 then
    if #tbl == 1 then
      tempString = tempString .. tbl[1]
    end
    for _, v in pairs(arc.targeting.targetList) do
      if arn.people[v] and arn.people[v].city then
        if not ctable[arn.people[v].city] then
          ctable[arn.people[v].city] = 1
        else
          ctable[arn.people[v].city] = ctable[arn.people[v].city] + 1
        end
      end
    end
  else
    for _, v in pairs(tbl) do
      tempString = tempString .. v .. " "
    end
  end
  for
    city, _ in
      spairs(
        ctable,
        function(t, a, b)
          return t[a] &gt; t[b]
        end
      )
  do
    table.insert(r, city)
  end
  for i = 1, #r do
    for _, x in pairs(tbl) do
      if arn.people[x] and arn.people[x].city then
        if arn.people[x].city == r[i] and string.find(tempString, x) == nil then
          tempString = tempString .. x .. " "
        end
      end
    end
    break
  end
  arc.targeting.populateTargetList(tempString)
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^t (.*)$</regex>
					</Alias>
				</AliasGroup>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>AR family</name>
			<packageName></packageName>
			<script>ar = ar or {}
ar.file = getMudletHomeDir() .. "/AR system"
if not lfs.attributes(ar.file) then
  lfs.mkdir(ar.file)
end
sendGMCP([[Core.Supports.Add ["Comm.Channel 1", "IRE.Target 1", "IRE.Rift 1"] ]])</script>
			<eventHandlerList />
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>AR combat</name>
				<packageName></packageName>
				<script>arc = arc or {}
</script>
				<eventHandlerList />
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>limbs</name>
					<packageName></packageName>
					<script>arc.limbs = {}
arc.limbs.damages =
  {
    ["right leg"] = {[100] = "damagedrightleg", [200] = "mangledrightleg"},
    ["left leg"] = {[100] = "damagedleftleg", [200] = "mangledleftleg"},
    ["head"] = {[100] = "damagedhead", [200] = "mangledhead"},
    ["right arm"] = {[100] = "damagedrightarm", [200] = "mangledrightarm"},
    ["left arm"] = {[100] = "damagedleftarm", [200] = "mangledrightarm"},
    ["torso"] = {[100] = "miltrauma", [200] = "serioustrauma"},
  }
arc.limbs.cureOrder =
  {
    [1] = {"mangledleftleg", "mangledhead", "serioustrauma", "mangledleftarm"},
    [2] = {"mangledrightleg", "mangledrightarm", "mildtrauma", "damagedhead"},
    [3] = {"damagedleftleg", "damagedleftarm", "tonguetie", "heartseed"},
    [4] = {"damagedrightleg", "damagedrightarm"},
  }
arc.limbs.cureAdditionals =
  {
    ["head"] = {"concussion", "calcifiedhead", "laceratedthroat"},
    ["torso"] = {"calcifiedtorso", "hypothermia"},
  }</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>add limb damage</name>
						<packageName></packageName>
						<script>arc.limbs.addDamage =
  function(who, where, percent)
    if not arc.track[who] then
      arc.setup(who)
    end
    arc.track[who].limbs[where] = arc.track[who].limbs[where] + percent
    if arc.track[who].limbs[where] &gt;= 200 then
      arc.affs.add(arc.track[who].limbs[where][200])
    elseif arc.track[who].limbs[where] &gt;= 100 then
      arc.affs.add(arc.track[who].limbs[where][100])
    end
    raiseEvent("arc.update", who)
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>limb prepped</name>
						<packageName></packageName>
						<script>arc.limbs.isPrepped =
  function(who, where, percent)
    if arc.track[who].limbs[where] + percent &gt;= 100 and arc.track[who].limbs[where] &lt; 100 then
      return true
    else
      return false
    end
    raiseEvent("arc.update", who)
  end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>cures</name>
					<packageName></packageName>
					<script>arc.cures = arc.cures or {}
 </script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>eat</name>
						<packageName></packageName>
						<script>arc.cures.eat =
  function(who, cure)
    if not arc.track[who] then
      return
    end
    local affs = {}
    local change = 0
    if arc.track[who].anorexia and arc.track[who].anorexia == 100 then
      return arc.illusion(cure)
    end
    if arc.track[who].bals.eat == true then
      arc.cures.backtrack(who, "anorexia")
      arc.track[who].bals.eat = false
      for i = 1, #arc.cureList[cure] do
        if arc.track[who].affs[arc.cureList[cure][i]] then
          table.insert(affs, arc.cureList[cure][i])
        end
      end
      if #affs ~= 0 then
        change = 100 / #affs
        for i = 1, #affs do
          arc.track[who].affs[affs[i]] = arc.track[who].affs[affs[i]] - change
        end
        arc.cures.addToHistory(who, cure, change)
      end
    end
    arc.cures.timer(who, "eat", 1.5)
    raiseEvent("arc.update", who)
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>apply - restoration</name>
						<packageName></packageName>
						<script>arc.cures.restoration =
  function(who, cure)
    local affs = {}
    local change = 100
    for i = 1, #arc.cureList[cure] do
      if arc.track[who].affs[arc.cureList[cure][i]] then
        table.insert(affs, arc.cureList[cure][i])
      end
    end
    for i = 1, #arc.limbs.cureOrder do
      for k, v in pairs(arc.limbs.cureOrder[i]) do
        if table.contains(affs, v) == true then
          arc.track[who].bals.salve = false
          arc.cures.timer(who, "salve", 4)
          arc.track[who].timers.salve =
            tempTimer(4, [[arc.track["]] .. who .. [["].affs["]] .. v .. [["] = nil]], false)
          arc.cures.addToHistory(who, cure, change)
           raiseEvent("arc.update", who)
          return
        end
      end
    end
      raiseEvent("arc.update", who)
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>apply</name>
						<packageName></packageName>
						<script>arc.cures.salve =
  function(who, cure)
    if not arc.track[who] then
      return
    end
    local affs = {}
    local change = 0
    if arc.track[who].slickness and arc.track[who].slickness == 100 then
      return arc.illusion(cure)
    end
    if arc.track[who].bals.salve == false then
      return
    end
    arc.cures.backtrack(who, "slickness")
    arc.track[who].bals.salve = false
    for i = 1, #arc.cureList[cure] do
      if arc.track[who].affs[arc.cureList[cure][i]] then
        table.insert(affs, arc.cureList[cure][i])
      end
    end
    if #affs == 0 then
      if arc.track[who].defs.mass == false then
        arc.track[who].defs.mass = true
      else
        arc.cures.preapply(who, cure)
        return
      end
      change = 100 / #affs
      for i = 1, #affs do
        if table.contains(arc.limbs.damages, affs[i]) then
          if cure == "head" and not arc.track[who].affs.crushedthroat then
            arc.cures.restoration(who, cure)
            return
          end
        end
      end
      if #affs ~= 0 then
        change = 100 / #affs
        for i = 1, #affs do
          arc.track[who].affs[affs[i]] = arc.track[who].affs[affs[i]] - change
        end
        arc.cures.addToHistory(who, cure, change)
        arc.cures.timer(who, "salve", 1)
      end
      raiseEvent("arc.update", who)
    end
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>smoke</name>
						<packageName></packageName>
						<script>arc.cures.smoke =
  function(who, cure)
    if not arc.track[who] then
      return
    end
    local affs = {}
    local change = 0
    if arc.track[who].asthma and arc.track[who].asthma == 100 then
      return arc.illusion(cure)
    end
    if arc.track[who].bals.smoke == true then
      arc.cures.backtrack(who, "asthma")
      arc.track[who].bals.smoke = false
      for i = 1, #arc.cureList[cure] do
        if arc.track[who].affs[arc.cureList[cure][i]] then
          table.insert(affs, arc.cureList[cure][i])
        end
      end
      if #affs ~= 0 then
        change = 100 / #affs
        for i = 1, #affs do
          arc.track[who].affs[affs[i]] = arc.track[who].affs[affs[i]] - change
        end
        arc.cures.addToHistory(who, cure, change)
      else
        if not arc.track[who].stackingAffs.unweavingspirit then
          arc.defs.reboundingTracker(who)
        end
      end
      arc.cures.timer(who, "smoke", 1.6)
      raiseEvent("arc.update", who)
    end
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>focus</name>
						<packageName></packageName>
						<script>arc.cures.focus =
  function(who, cure)
    if not arc.track[who] then
      return
    end
    local affs = {}
    local change = 0
    if arc.track[who].impatience and arc.track[who].impatience == 100 then
      return arc.illusion(cure)
    end
    if arc.track[who].bals.focus == true then
      arc.cures.backtrack(who, "impatience")
      arc.track[who].bals.focus = false
      for i = 1, #arc.cureList[cure] do
        if arc.track[who].affs[arc.cureList[cure][i]] then
          table.insert(affs, arc.cureList[cure][i])
        end
      end
      if #i == 0 then
        return
      end
      change = 100 / #affs
      for i = 1, #affs do
        arc.track[who].affs[affs[i]] = arc.track[who].affs[affs[i]] - change
      end
      arc.cures.timer(who, "focus", 1.4)
      arc.cures.addToHistory(who, cure, change)
      raiseEvent("arc.update", who)
    end
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>tree</name>
						<packageName></packageName>
						<script>arc.cures.tree =
  function(who, cure)
    if not arc.track[who] then
      return
    end
    local affs = {}
    local change = 0
    if not arc.track[who].info.manipulate or arc.track[who].info.manipulate == false then
      if arc.track[who].affs.paralysis and arc.track[who].affs.paralysis == 100 then
        return arc.illusion(cure)
      end
    end
    if arc.track[who].bals.tree == true then
      arc.cures.backtrack(who, "paralysis")
      arc.track[who].bals.tree = false
      for i = 1, #arc.cureList[cure] do
        if arc.track[who].affs[arc.cureList[cure][i]] then
          table.insert(affs, arc.cureList[cure][i])
        end
      end
      if #affs ~= 0 then
        change = 100 / #affs
        for i = 1, #affs do
          arc.track[who].affs[affs[i]] = arc.track[who].affs[affs[i]] - change
        end
        arc.cures.addToHistory(who, cure, change)
      end
      arc.cures.timer(who, "tree", 14)
      raiseEvent("arc.update", who)
    end
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>restore</name>
						<packageName></packageName>
						<script>arc.cures.restore =
  function(who)
    local t = {}
    local time = 2.7
    for aff, _ in pairs(arc.track[who].affs) do
      if string.find(tostring(aff), "broken") then
        table.insert(t, aff)
      end
    end
    if #t &gt; 0 then
      for i = 1, #t do
        arc.track[who].affs[t[i]] = nil
      end
    end
    time = time + (#t * 1.5)
    arc.cures.timer(who, "baleq", time)
        raiseEvent("arc.update", who)
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>concentrate</name>
						<packageName></packageName>
						<script>arc.cures.concentrate =
  function(who)
    arc.cures.backtrack(who, "confusion")
    arc.track[who].affs.disrupted = nil
    raiseEvent("arc.update", who)
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>single cure</name>
						<packageName></packageName>
						<script>arc.cures.singleCure =
  function(who, what)
    arc.track[who].affs[what] = nil
    raiseEvent("arc.update", who)
  end</script>
						<eventHandlerList />
					</Script>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>active cures</name>
						<packageName></packageName>
						<script>arc.activeHeals = arc.activeHeals or {}</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>fitness</name>
							<packageName></packageName>
							<script>arc.activeHeals.fitness =
  function(who)
    local t = {"infernal", "paladin", "runewarden", "monk", "sentinel", "druid", "blademaster"}
    if
      arc.track[who].bals.class == true and
      table.contains(t, arc.track[who].info.class) == true
    then
      arc.cures.backtrack(who, "weariness")
      arc.track[who].bals.class = false
      arc.track[who].affs.asthma = nil
      arc.cures.timer(who, "class", 10)
      arc.track[who].bals.baleq = false
      arc.cures.timer(who, "baleq", 2.7)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>fool</name>
							<packageName></packageName>
							<script>arc.activeHeals.fool =
  function(who)
    if
      (arc.track[who].info.class == "occultist" or arc.track[who].info.class == "jester") and
      arc.track[who].bals.class == true and
      arc.track[who].bals.baleq == true
    then
      local t = {}
      local change = 0
      arc.cures.backtrack(who, "paralysis")
      arc.track[who].bals.class = false
      for aff, _ in pairs(ars.track[who].affs) do
        table.insert(t, aff)
      end
      change = (100 / #affs) * 3
      for k, _ in pairs(ars.track[who].affs) do
        ars.track[who].affs[k] = ars.track[who].affs - change
      end
      arc.cures.timer(who, "class", 35)
      arc.cures.addToHistory(who, "active", change)
      arc.track[who].bals.baleq = false
      arc.cures.timer(who, "baleq", 2.7)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>expunge</name>
							<packageName></packageName>
							<script>arc.activeHeals.expunge =
  function(who)
    local change
    local affs = {}
    if arc.track[who].info.class == "psion" and arc.track[who].bals.class == true then
      arc.cures.backtrack(who, "confusion")
      arc.track[who].bals.class = false
      if arc.track[who].affs.impatience and arc.track[who].affs.impatience == 100 then
        arc.track[who].affs.impatience = nil
      else
        for i = 1, #arc.cureList["focus"] do
          if arc.track[who].affs[arc.cureList["focus"][i]] then
            table.insert(affs, arc.cureList["focus"][i])
          end
        end
        if #affs ~= 0 then
          change = 100 / #affs
          for i = 1, #affs do
            arc.track[who].affs[affs[i]] = arc.track[who].affs[affs[i]] - change
          end
        end
      end
      arc.cures.addToHistory(who, "active", change)
      arc.cures.timer(who, "class", 20)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>dragonheal</name>
							<packageName></packageName>
							<script>arc.activeHeals.dragonheal =
  function(who)
    if
      arc.track[who].info.class == "dragon" and       arc.track[who].bals.class == true
    then
      local t = {}
      local change = 0
      arc.cures.backtrack(who, "recklessness, weariness")
      arc.track[who].bals.class = false
      for aff, _ in pairs(arc.track[who].affs) do
        table.insert(t, aff)
      end
      if arc.track[who].affs.prone == 100 then
        change = 100 / #affs
      else
        change = (100 / #affs) * 3
      end
      for k, _ in pairs(arc.track[who].affs) do
        arc.track[who].affs[k] = arc.track[who].affs - change
      end
      arc.cures.timer(who, "class", 20)
      arc.cures.addToHistory(who, "active", change)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>might</name>
							<packageName></packageName>
							<script>arc.activeHeals.expunge =
  function(who)
    if
      (arc.track[who].info.class == "druid" or arc.track[who].info.class == "sentinel") and
      arc.track[who].bals.class == true
    then
      for i = 1, #arc.cureList.might do
        if arc.track[who].affs[arc.cureList.might[i]] then
          table.insert(affs, arc.cureList.might[i])
        end
      end
      if #affs ~= 0 then
        change = 100 / #affs
        for i = 1, #affs do
          arc.track[who].affs[affs[i]] = arc.track[who].affs[affs[i]] - change
        end
        arc.cures.addToHistory(who, cure, change)
      end
      arc.cures.backtrack(who, "prone")
      arc.track[who].bals.class = false
      arc.cures.addToHistory(who, "active", change)
      arc.cures.timer(who, "class", 10)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>salt</name>
							<packageName></packageName>
							<script>arc.activeHeals.salt =
  function(who)
    if
      arc.track[who].info.class == "alchemist" and arc.track[who].bals.class == true
    then
      local t = {}
      local change = 0
      arc.cures.backtrack(who, "stupidity")
      arc.track[who].bals.class = false
      for aff, _ in pairs(ars.track[who].affs) do
        table.insert(t, aff)
      end
      change = 100 / #affs
      for k, _ in pairs(ars.track[who].affs) do
        ars.track[who].affs[k] = ars.track[who].affs - change
      end
      arc.cures.timer(who, "class", 15)
      arc.cures.addToHistory(who, "active", change)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>accelerate</name>
							<packageName></packageName>
							<script>arc.activeHeals.accelerate =
  function(who)
    if arc.track[who].info.class == "depthswalker" and arc.track[who].bals.class == true then
      local t = {}
      local change = 0
      arc.cures.backtrack(who, "recklessness")
      arc.track[who].bals.class = false
      for aff, _ in pairs(ars.track[who].affs) do
        table.insert(t, aff)
      end
      if arc.track[who].info.boosted == true then
        arc.cures.backtrack(who, "prone")
        change = (100 / #affs) * 2
      else
        change = 100 / #affs
      end
      for k, _ in pairs(arc.track[who].affs) do
        arc.track[who].affs[k] = arc.track[who].affs - change
      end
      arc.cures.timer(who, "class", 15)
      arc.cures.addToHistory(who, "active", change)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>bloodboil</name>
							<packageName></packageName>
							<script>arc.activeHeals.bloodboil =
  function(who)
    if arc.track[who].info.class == "magi" and arc.track[who].bals.class == true then
      local t = {}
      local change = 0
      arc.cures.backtrack(who, "haemophilia")
      arc.track[who].bals.class = false
      for aff, _ in pairs(ars.track[who].affs) do
        table.insert(t, aff)
      end
      change = 100 / #affs
      for k, _ in pairs(arc.track[who].affs) do
        arc.track[who].affs[k] = arc.track[who].affs - change
      end
      arc.cures.timer(who, "class", 15)
      arc.cures.addToHistory(who, "active", change)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>daina</name>
							<packageName></packageName>
							<script>arc.activeHeals.daina =
  function(who)
    if
      arc.track[who].info.class == "shaman" and arc.track[who].bals.class == true
    then
      local t = {}
      local change = 0
      arc.cures.backtrack(who, "selarnia")
      arc.track[who].bals.class = false
      for aff, _ in pairs(ars.track[who].affs) do
        table.insert(t, aff)
      end
      change = 100 / #affs
      for k, _ in pairs(arc.track[who].affs) do
        arc.track[who].affs[k] = arc.track[who].affs - change
      end
      arc.cures.timer(who, "class", 15)
      arc.cures.addToHistory(who, "active", change)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>shrug</name>
							<packageName></packageName>
							<script>arc.activeHeals.shrug =
  function(who)
    if
      arc.track[who].info.class == "serpent" and arc.track[who].bals.class == true
    then
      local t = {}
      local change = 0
      arc.cures.backtrack(who, "weariness")
      arc.track[who].bals.class = false
      for aff, _ in pairs(ars.track[who].affs) do
        table.insert(t, aff)
      end
      change = 100 / #affs
      for k, _ in pairs(arc.track[who].affs) do
        arc.track[who].affs[k] = arc.track[who].affs - change
      end
      arc.cures.timer(who, "class", 10)
      arc.cures.addToHistory(who, "active", change)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>eruption</name>
							<packageName></packageName>
							<script>arc.activeHeals.eruption =
  function(who)
    if arc.track[who].bals.class == true and arc.track[who].info.class == "earth lord" then
      local t = {}
      local change = 0
      arc.cures.backtrack(who, "weariness")
      arc.track[who].bals.class = false
      for aff, _ in pairs(ars.track[who].affs) do
        table.insert(t, aff)
      end
      change = 100 / #affs
      for k, _ in pairs(arc.track[who].affs) do
        arc.track[who].affs[k] = arc.track[who].affs - change
      end
      arc.cures.timer(who, "class", 10)
      arc.cures.addToHistory(who, "active", change)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>slough</name>
							<packageName></packageName>
							<script>arc.activeHeals.slough =
  function(who)
  local t = {}
  local change = {}
    if
      arc.track[who].info.class == "fire lord" and arc.track[who].bals.class == true
    then

      arc.cures.backtrack(who, "prone")
      arc.track[who].bals.class = false
      for aff, _ in pairs(ars.track[who].affs) do
        table.insert(t, aff)
      end
      change = 100 / #affs
      for k, _ in pairs(ars.track[who].affs) do
        ars.track[who].affs[k] = ars.track[who].affs - change
      end
      arc.cures.timer(who, "class", 15)
      arc.cures.addToHistory(who, "active", change)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>alleviate</name>
							<packageName></packageName>
							<script>arc.activeHeals.alleviate =
  function(who)
    local affs = {}
    local change = 0
    if not arc.track[who] then
      return
    end
    if arc.track[who].affs.paralysis and arc.track[who].affs.paralysis == 100 then
      return arc.illusion(class)
    end

    if arc.track[who].bals.class == true then
      arc.cures.backtrack(who, "paralysis")
      arc.track[who].bals.class = false
      for i = 1, #arc.cureList["tree"] do
        if arc.track[who].affs[arc.cureList["tree"][i]] then
          table.insert(affs, arc.cureList["tree"][i])
        end
      end
      if #affs ~= 0 then
        change = 100 / #affs
        for i = 1, #affs do
          arc.track[who].affs[affs[i]] = arc.track[who].affs[affs[i]] - change
        end
        arc.cures.addToHistory(who, "active", change)
      end
      arc.cures.timer(who, "class", 15)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>rage</name>
							<packageName></packageName>
							<script>arc.activeHeals.rage =
  function(who)
    local change
    local affs = {}
    for i = 1, #arc.cureList["rage"] do
      if arc.track[who].affs[arc.cureList["rage"][i]] then
        table.insert(affs, arc.cureList["rage"][i])
      end
    end
    if #affs ~= 0 then
      change = 100 / #affs
      for i = 1, #affs do
        arc.track[who].affs[affs[i]] = arc.track[who].affs[affs[i]] - change
      end
    end
    arc.cures.addToHistory(who, "rage", change)
    raiseEvent("arc.update", who)
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>purify</name>
							<packageName></packageName>
							<script>arc.activeHeals.purify =
  function(who)
    local t = {}
    local change = {}
    if arc.track[who].info.class == "water lord" and arc.track[who].bals.class == true then
      arc.track[who].bals.class = false
      for aff, _ in pairs(ars.track[who].affs) do
        table.insert(t, aff)
      end
      change = 100 / #affs
      for k, _ in pairs(ars.track[who].affs) do
        ars.track[who].affs[k] = ars.track[who].affs - change
      end
      arc.cures.timer(who, "class", 15)
      arc.cures.addToHistory(who, "active", change)
      raiseEvent("arc.update", who)
    end
  end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<Script isActive="yes" isFolder="no">
						<name>passive</name>
						<packageName></packageName>
						<script>arc.cures.passive =
  function(who, cure)
    local affs = {}
    local change = 0
    if arc.track[who].bals.passive == true then
      if ars.track[who].affs.voyria then
        affs = {"voyria"}
      else
        for i = 1, #arc.cureList[cure] do
          if arc.track[who].affs[arc.cureList[cure][i]] then
            table.insert(affs, arc.cureList[cure][i])
          end
        end
      end
      arc.track[who].bals.passive = false
      local change = 100 / #affs
      for i = 1, #affs do
        arc.track[who].affs[affs[i]] = arc.track[who].affs[affs[i]] - change
      end
      arc.cures.timer(who, "passive", 10)
      arc.track[who].cureHistory.passive = change
      raiseEvent("arc.update", who)
    end
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>backtrack</name>
						<packageName></packageName>
						<script>arc.cures.backtrack =
  function(who, what)
    local toBacktrack = {}
    local cure
    if not arc.track[who].affs[what] then
      return
    end
    for i = 1, #arc.track[who].cureHistory.order do
      if table.contains(arc.cureList[arc.track[who].cureHistory.order[i]], what) then
        toBacktrack = table.deepcopy(arc.cureList[arc.track[who].cureHistory.order[i]])
        cure = arc.track[who].cureHistory.order[i]
        break
      end
    end
    arc.track[who].affs[what] = nil
    for _, aff in pairs(toBacktrack) do
      if arc.track[who].affs[aff] then
        arc.track[who].affs[aff] =
          arc.track[who].affs[aff] + arc.track[who].cureHistory.percent[cure]
      end
    end
    raiseEvent("arc.update", who)
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>add to cure history</name>
						<packageName></packageName>
						<script>arc.cures.addToHistory =
  function(who, cure, perc)
    if arc.track[who] then
      arc.track[who].cureHistory.percent[cure] = tonumber(perc)
      table.insert(arc.track[who].cureHistory.order, 1, cure)
    end
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>timers</name>
						<packageName></packageName>
						<script>arc.cures.timer =
  function(who, what, time)
    if arc.track[who].timers[what] then
      killTimer(arc.track[who].timers[what])
    end
    arc.track[who].timers[what] =
      tempTimer(
        time - getNetworkLatency(),
        [[arc.track["]] .. who .. [["].bals["]] .. what .. [["] = true]],
        false
      )
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>preapply</name>
						<packageName></packageName>
						<script>arc.cures.preapply =
  function(who, where)
    arc.track[who].bals.salve = false
    arc.cures.timer(who, "salve", 4)
    if arc.track[who].timers.preapply then
      killTimer(arc.track[who].timers.preapply)
    end
    arc.track[who].timers.preapply =
      tempTimer(
        4,
        function()
          local affs = {}
          local change = 100
          for i = 1, #arc.cureList[where] do
            if arc.track[who].affs[arc.cureList[where][i]] then
              table.insert(affs, arc.cureList[where][i])
            end
          end
          for i = 1, #arc.limbs.cureOrder do
            for k, v in pairs(arc.limbs.cureOrder[i]) do
              if table.contains(affs, v) == true then
                arc.track[who].affs[v] = nil
                return
              end
            end
          end
          arc.cures.addToHistory(who, where, change)
          raiseEvent("arc.update", who)
        end,
        false
      )
    raiseEvent("arc.update", who)
  end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>targeting</name>
					<packageName></packageName>
					<script>arc.track = arc.track or {}
arc.targeting = arc.targeting or {}
arc.targeting.targetList = arc.targeting.targetList or {}
arc.targeting.highlights = arc.targeting.highlights or {}
arc.targeting.myClassVars =
  {
    ["bleed"] = {"blademaster", "psion", "sentinel", "shaman", "waterlord"},
    ["fashions"] = {"jester", "shaman"},
    
  }
arc.targeting.oClassAffs =
  {
    ["clumsiness"] =
      {
        "apostate",
        "blademaster",
        "bard",
        "depthswalker",
        "druid",
        "default",
        "infernal",
        "runewarden",
        "paladin",
        "jester",
        "monk",
        "psion",
        "serpent",
        "shaman",
      },
    ["recklessness"] = {"depthswalker", "dragon", "default"},
    ["weariness"] =
      {
        "priest",
        "blademaster",
        "druid",
        "infernal",
        "runewarden",
        "paladin",
        "monk",
        "sentinel",
        "serpent",
        "default",
      },
    ["selarnia"] = {"druid", "shaman", "sentinel"},
    ["haemophilia"] = {"magi"},
    ["prone"] = {"depthswalker", "druid", "sentinel", "default"},
    ["stupidity"] = {"alchemist"},
    ["paralysis"] = {"occultist", "jester", "default"},
    ["disloyalty"] =
      {
        "alchemist",
        "apostate",
        "jester",
        "druid",
        "magi",
        "occultist",
        "infernal",
        "runewarden",
        "paladin",
        "sentinel",
        "serpent",
        "sylvan",
      },
    ["lethargy"] =
      {
        "alchemist",
        "apostate",
        "bard",
        "blademaster",
        "depthswalker",
        "druid",
        "infernal",
        "runewarden",
        "paladin",
        "jester",
        "monk",
        "priest",
        "psion",
        "sentinel",
        "serpent",
        "shaman",
        "sylvan",
      },
    ["confusion"] = {"psion", "occultist", "magi"},
  }</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>setup target</name>
						<packageName></packageName>
						<script>arc.targeting.setup =
  function(targets)
    for who in string.gmatch(targets, "(%w+)") do
      who = who:title()
      local oClass
      local infoTable = {}
      if arn and arn.people[who] then
        oClass = arn.people[who].class
      else
        oClass = "default"
      end
      if oClass == "depthswalker" then
        infoTable.boosted = false
      end
      if oClass == "sentinel" or oClass == "druid" then
        infoTable.morph = infoTable.morph or "icewyrm"
      end
      if oClass == "psion" then
        infoTable.manipulate = infoTable.manipulate or false
      end
      infoTable.class = oClass
      if not arc.track[who] then
        arc.track[who] = {}
        arc.track[who] =
          {
            stackingAffs = arc.track[who].stackingAffs or {},
            locks =
              arc.track[who].locks or
              {
                focuslock = false,
                salvelock = false,
                riftlock = false,
                hardlock = false,
                softlock = false,
                truelock = false,
              },
            info = arc.track[who].info or table.deepcopy(infoTable),
            vits = arc.track[who].vits or {hp = 0, maxhp = 0, mp = 0, maxmp = 0, bleed = 0},
            defs =
              arc.track[who].defs or
              {
                shield = false,
                rebounding = true,
                curseward = true,
                deafness = true,
                blindnes = true,
                speed = true,
                sileris = true,
                mass = true,
                insomnia = true,
              },
            bals =
              arc.track[who].bals or
              {
                eat = true,
                tree = true,
                baleq = true,
                smoke = true,
                class = true,
                salve = true,
                focus = true,
                passive = false,
              },
            limbs =
              arc.track[who].limbs or
              {
                ["right leg"] = 0,
                ["left leg"] = 0,
                ["right arm"] = 0,
                ["left arm"] = 0,
                ["head"] = 0,
                ["torso"] = 0,
              },
            timers =
              arc.track[who].timers or
              {
                eat =
                  tempTimer(
                    1.5 - getNetworkLatency(),
                    [[arc.track["]] .. who .. [["].bals.eat = true]],
                    false
                  ),
                tree =
                  tempTimer(
                    14 - getNetworkLatency(),
                    [[arc.track["]] .. who .. [["].bals.tree = true]],
                    false
                  ),
                baleq =
                  tempTimer(
                    1.8 - getNetworkLatency(),
                    [[arc.track["]] .. who .. [["].bals.baleq = true]],
                    false
                  ),
                smoke =
                  tempTimer(
                    1.6 - getNetworkLatency(),
                    [[arc.track["]] .. who .. [["].bals.smoke = true]],
                    false
                  ),
                class =
                  tempTimer(
                    10 - getNetworkLatency(),
                    [[arc.track["]] .. who .. [["].bals.class = true]],
                    false
                  ),
                salve =
                  tempTimer(
                    1 - getNetworkLatency(),
                    [[arc.track["]] .. who .. [["].bals.salve = true]],
                    false
                  ),
                focus =
                  tempTimer(
                    1.4 - getNetworkLatency(),
                    [[arc.track["]] .. who .. [["].bals.focus = true]],
                    false
                  ),
                passive =
                  tempTimer(
                    10 - getNetworkLatency(),
                    [[arc.track["]] .. who .. [["].bals.passive = true]],
                    false
                  ),
              },
            affs = arc.track[who].affs or {},
            cureHistory = arc.track[who].cureHistory or {order = {}, percent = {}},
          }
        for _, timer in pairs(arc.track[who].timers) do
          killTimer(timer)
        end
        for k, v in pairs(arc.targeting.myClassVars) do
          if table.contains(v, ars.myInfo.class) then
            arc.track[who].info[k] = arc.track[who].info[k] or 0
          end
        end
      end
      raiseEvent("arc.targeting.setup", who)
      send("enemy " .. who)
    end
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>target highlights</name>
						<packageName></packageName>
						<script>arc.targeting.highlight =
  function()
    for trig, _ in pairs(arc.targeting.highlights) do
      killTrigger(arc.targeting.highlights[trig])
      arc.targeting.highlights[trig] = nil
    end
    for k, who in pairs(arc.targeting.targetList) do
      arc.targeting.highlights[who] =
        tempTrigger(
          who,
          function()
            selectString(who, 1)
            creplace("&lt;hot_pink&gt;[T" .. k .. "]&lt;tomato&gt;" .. who)
          end
        )
    end
  end
registerAnonymousEventHandler("arc.targeting.targetListUpdate", "arc.targeting.highlight")</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>populate target list</name>
						<packageName></packageName>
						<script>arc.targeting.populateTargetList =
  function(targets)
    local n = 1
    for who in string.gmatch(targets, "(%w+)") do
      who = who:title()
       

      if table.contains(arc.targeting.targetList, who) then
        table.remove(arc.targeting.targetList, table.index_of(arc.targeting.targetList, who))
      end
      table.insert(arc.targeting.targetList, n, who)
      n = n + 1
    end
    arc.targeting.setup(targets)
    raiseEvent("arc.targeting.targetListUpdate")
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>clear target list</name>
						<packageName></packageName>
						<script>arc.targeting.clearTargetList =
  function()
    for k, v in pairs(arc.targeting.highlights) do
      killTrigger(arc.targeting.highlights[k])
      arc.targeting.highlights[k] = nil
    end
    arc.targeting.targetList = {}
  end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>party handling</name>
					<packageName></packageName>
					<script>arc.party = arc.party or {}
arc.party.inParty = arc.party.inParty or false
arc.party.partyWho = arc.party.partyWho or {}
</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Get party channel</name>
						<packageName></packageName>
						<script>arc.party.getChannel =
  function()
    if table.contains(gmcp.Comm.Channel.List, "party") == true then
      arc.party.inParty = true
    else
      arc.party.inParty = false
    end
  end
registerAnonymousEventHandler("gmcp.Comm.Channel.List", "arc.party.getChannel")</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>defs</name>
					<packageName></packageName>
					<script>arc.defs = arc.defs or {}</script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>rebounding tracker</name>
						<packageName></packageName>
						<script>arc.defs.reboundingTracker =
  function(who)
    if arc.track[who].timers.rebounding then
      killTimer(arc.track[who].timers.rebounding)
    end
    arc.track[who].timers.rebounding =
      tempTimer(
        8.5 - getNetworkLatency(), [[arc.track["]] .. who .. [["].defs.rebounding = true]], false
      )
    raiseEvent("arc.update", who)
  end</script>
						<eventHandlerList />
					</Script>
					<Script isActive="yes" isFolder="no">
						<name>sip - speed and latch</name>
						<packageName></packageName>
						<script>arc.defs.sip =
  function(who)
    arc.cures.backtrack(who, "anorexia")
    if arc.track[who].timers.speedtimer then
      killTimer(arc.track[who].timers.speedtimer)
    end
    if arc.track[who].defs.speed == false then
      arc.track[who].timers.speedtimer =
        tempTimer(
          2.5,
          function()
            arc.track[who].defs.speed = true
            killTimer(arc.track[who].timers.speedtimer)
            arc.track[who].timers.speedtimer = nil
          end
        )
    elseif arc.track[who].affs.voyria then
      arc.track[who].affs.voyria = nil
    end
    raiseEvent("arc.update", who)
  end</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>functions</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>conversions and counters</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>venom name convert</name>
							<packageName></packageName>
							<script>arc.vconvert =
  function(venom)
    local venoms =
      {
        ["xentio"] = "clumsiness",
        ["eurypteria"] = "recklessness",
        ["kalmia"] = "asthma",
        ["digitalis"] = "shyness",
        ["darkshade"] = "darkshade",
        ["curare"] = "paralysis",
        ["prefarar"] = "sensitivity",
        ["monkshood"] = "disloyalty",
        ["euphorbia"] = "nausea",
        ["vernalius"] = "weariness",
        ["larkspur"] = "dizziness",
        ["slike"] = "anorexia",
        ["voyria"] = "voyria",
        ["notechis"] = "haemophilia",
        ["vardrax"] = "addiction",
        ["aconite"] = "stupidity",
        ["selarnia"] = "selarnia",
        ["gecko"] = "slickness",
        ["scytherus"] = "scytherus",
        ["nechamandra"] = "shivering",
      }
    return venoms[venom]
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>assess</name>
							<packageName></packageName>
							<script>arc.assess =
  function(who, hp, maxhp)
    arc.track[who].vits.hp = hp
    arc.track[who].vits.maxhp = maxhp
    --insert class limb info here
    --example:
    --if ars.myInfo.class == "bard" then
    --if maxhp &lt; 5000 then
    --ars.track[who].limbs.pphit = 10/100
    --end
    --end
    raiseEvent("arc.update", who)
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>bleed counter</name>
							<packageName></packageName>
							<script>arc.bleedCounter =
  function(who, amt)
    if arc.bool("haemophilia") == true then
      arc.track[who].vits.bleed = arc.track[who].vits.bleed + amt
    end
       raiseEvent("arc.update", who)
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>contemplate</name>
							<packageName></packageName>
							<script>arc.contemplate =
  function(who, mp, maxmp)
    arc.track[who].vits.mp = mp
    arc.track[who].vits.maxmp = maxmp
    --insert class limb info here
    --example:
    --if ars.myInfo.class == "priest" then
    --if (mp/maxmp)*100 &lt;= 50 then
    --absolve
    --end
    --end
       raiseEvent("arc.update", who)
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>stack count</name>
							<packageName></packageName>
							<script>arc.stackCount =
  function(who, affs)
    local count = 0
    for aff in string.gmatch(affs, "%w+") do
      if table.contains(arc.track[who].affs, aff) then
        count = count + arc.track[who].affs[aff]
      end
    end
    return count / 100
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>get timers</name>
							<packageName></packageName>
							<script>arc.getTimers =
  function(who)
    local t = {}
    for timer, _ in pairs(arc.track[who].timers) do
      t[timer] = remainingTime(arc.track[who].timers[timer])
      if t[timer] == nil then
        t[timer] = 0
      end
    end
    return t
  end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>affliction handling</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>probability</name>
							<packageName></packageName>
							<script>arc.probability =
  function(who, what)
    if arc.track[who].affs[what] == nil then
      return 0
    else
      return arc.track[who].affs[what]
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>request boolean value</name>
							<packageName></packageName>
							<script>arc.bool =
  function(who, what)
    if arc.track[who].affs[what] == nil then
      return false
    else
      return true
    end
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>add aff</name>
							<packageName></packageName>
							<script>arc.addAff =
  function(who, what, line)
    local t = {}
    local color
    local colorIgnore = {"legs", "arms", "torso", "head", "passive", "tree", "body"}
    local cureColor
    local tempString = ""
    for aff in string.gmatch(what, "(%w+)") do
      arc.track[who].affs[aff] = 100
      for k, v in pairs(ar.cureColors) do
        if table.contains(colorIgnore, k) == false and table.contains(ar.cureList[k], aff) then
          cureColor = v
          break
        end
      end
      t[ar.affShortName[aff]] = cureColor
    end
    for a, c in pairs(t) do
      tempString = tempString .. c .. string.upper(string.cut(a, 3)) .. " "
    end
    cecho("&lt;green&gt;[" .. tempString:trim() .. "&lt;green&gt;]")
    raiseEvent("arc.update", who)
  end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>add stacking aff</name>
							<packageName></packageName>
							<script>arc.addStackingAff =
  function(who, what, num, line)
    local t = {}
    local color
    local colorIgnore = {"legs", "arms", "torso", "head", "passive", "tree", "body"}
    local cureColor
    local tempString = ""
    for aff in string.gmatch(what, "(%w+)") do
      if not arc.track[who].stackingAffs[aff] then
        arc.track[who].stackingAffs[aff] = 0
      end
      arc.track[who].stackingAffs[aff] = arc.track[who].stackingAffs[aff] + num
      for k, v in pairs(ar.cureColors) do
        if table.contains(colorIgnore, k) == false and table.contains(ar.cureList[k], aff) then
          cureColor = v
          break
        end
      end
      t[ar.affShortName[aff]] = cureColor
    end
    for a, c in pairs(t) do
      tempString = tempString .. c .. a .. ":" .. arc.track[who].stackingAffs[what] .. " "
    end
    cecho("&lt;green&gt;[" .. tempString:trim() .. "&lt;green&gt;]")
    raiseEvent("arc.update", who)
  end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>update</name>
						<packageName></packageName>
						<script></script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>update opponent status</name>
							<packageName></packageName>
							<script>arc.oUpdate =
  function(who)
    local totalPerc = 0
    for aff, perc in pairs(arc.track[who].affs) do
      if perc &gt; 100 then
        arc.track[who].affs[aff] = 100
      end
      arc.track[who].affs[aff] = math.floor(perc)
      totalPerc = totalPerc + perc
    end
    if totalPerc &lt; 95 then
      for x, _ in pairs(arc.track[who].affs) do
        arc.track[who].affs[x] = nil
      end
    end
    if not arc.track[who].affs.haemophilia then
      arc.track[who].vits.bleed = 0
    end
  end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
				</ScriptGroup>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>lists</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<Script isActive="yes" isFolder="no">
						<name>Cure list</name>
						<packageName></packageName>
						<script>arc.cureList =
  {
    might =
      {
        "paralysis",
        "weariness",
        "haemophilia",
        "brokenrightleg",
        "brokenleftleg",
        "brokenrightarm",
        "brokenleftarm",
      },
    rage =
      {
        "generosity",
        "indifference",
        "justice",
        "lovers",
        "pacified",
        "peace",
        "retribution",
        "timeloop",
      },
    concentrate = {"disrupted"},
    compose = {"fear"},
    wake = {"sleeping"},
    immunity = {"voyria"},
    stand = {"prone"},
    ginger = {"temperedcholeric", "temperedmelancholic", "temperedphlegmatic", "temperedsanguine"},
    bellwort =
      {
        "generosity",
        "indifference",
        "justice",
        "lovers",
        "pacified",
        "peace",
        "retribution",
        "timeloop",
      },
    pear = {"pressure"},
    body =
      {
        "anorexia",
        "burning",
        "calcifiedtorso",
        "heartseed",
        "hypothermia",
        "itching",
        "mildtrauma",
        "selarnia",
        "serioustrauma",
      },
    aurum =
      {
        "asthma",
        "clumsiness",
        "healthleech",
        "hypochondria",
        "parasite",
        "sensitivity",
        "weariness",
      },
    restoration =
      {
        "calcifiedskull",
        "calcifiedtorso",
        "concussion",
        "damagedhead",
        "damagedleftarm",
        "damagedleftleg",
        "damagedrightarm",
        "damagedrightleg",
        "heartseed",
        "hypothermia",
        "laceratedthroat",
        "mangledhead",
        "mangledleftarm",
        "mangledleftleg",
        "mangledrightarm",
        "mangledrightleg",
        "mildtrauma",
        "serioustrauma",
        "tonguetied",
      },
    antimony = {"temperedcholeric", "temperedmelancholic", "temperedphlegmatic", "temperedsanguine"},
    plumbum =
      {
        "depression",
        "dissonance",
        "dizziness",
        "epilepsy",
        "impatience",
        "insomnia",
        "shadowmadness",
        "shyness",
        "stupidity",
      },
    goldenseal =
      {
        "depression",
        "dissonance",
        "dizziness",
        "epilepsy",
        "impatience",
        "insomnia",
        "shadowmadness",
        "shyness",
        "stupidity",
      },
    bloodroot = {"paralysis", "slickness"},
    mending =
      {
        "brokenleftarm",
        "brokenleftleg",
        "brokenrightarm",
        "brokenrightleg",
        "burning",
        "crushedthroat",
        "dazzled",
        "selarnia",
      },
    ferrum = {"addiction", "darkshade", "haemophilia", "lethargy", "nausea", "scytherus"},
    cuprum =
      {
        "generosity",
        "indifference",
        "justice",
        "lovers",
        "pacified",
        "peace",
        "retribution",
        "timeloop",
      },
    ash = {"confusion", "dementia", "hallucinations", "hypersomnia", "paranoia"},
    magnesium = {"paralysis", "slickness"},
    lobelia =
      {
        "agoraphobia",
        "claustrophobia",
        "loneliness",
        "masochism",
        "recklessness",
        "spiritburn",
        "tenderskin",
        "vertigo",
        "whisperingmadness",
      },
    legs =
      {
        "brokenleftleg",
        "brokenrightleg",
        "damagedleftleg",
        "damagedrightleg",
        "mangledleftleg",
        "mangledrightleg",
        "torntendons",
      },
    torso = {"crackedribs", "grievouswounds"},
    argentum =
      {
        "agoraphobia",
        "claustrophobia",
        "loneliness",
        "masochism",
        "recklessness",
        "spiritburn",
        "tenderskin",
        "vertigo",
        "whisperingmadness",
      },
    time =
      {
        "aeon",
        "airfisted",
        "asphyxiating",
        "blackout",
        "blistered",
        "bruisedribs",
        "coldfate",
        "corruption",
        "cremated",
        "dazzled",
        "degenerate",
        "dehydrated",
        "demonstain",
        "deteriorate",
        "enmesh",
        "entropy",
        "flamefisted",
        "hamstrung",
        "hatred",
        "hecatecurse",
        "hindered",
        "homunculusmercury",
        "icefisted",
        "inquisition",
        "internalbleeding",
        "kaisurge",
        "lapsingconsciousness",
        "lightbind",
        "mindravaged",
        "muddled",
        "numbedleftarm",
        "numbedrightarm",
        "palpatarfeed",
        "petrified",
        "phlogisticated",
        "pinshot",
        "revealed",
        "scrambledbrains",
        "silenced",
        "silver",
        "slimeobscure",
        "solarburn",
        "timeflux",
        "trueblind",
        "unconsciousness",
        "vinewreathed",
        "vitiated",
        "vitrified",
        "voidfisted",
        "waterbonds",
      },
    focus =
      {
        "agoraphobia",
        "anorexia",
        "claustrophobia",
        "confusion",
        "dementia",
        "dizziness",
        "epilepsy",
        "generosity",
        "hallucinations",
        "loneliness",
        "lovers",
        "masochism",
        "pacified",
        "paranoia",
        "peace",
        "recklessness",
        "shyness",
        "stupidity",
        "stuttering",
        "vertigo",
      },
    arms =
      {
        "brokenleftarm",
        "brokenrightarm",
        "damagedleftarm",
        "damagedrightarm",
        "mangledleftarm",
        "mangledrightarm",
        "wristfractures",
      },
    stannum = {"confusion", "dementia", "hallucinations", "hypersomnia", "paranoia"},
    ginseng =
      {"addiction", "darkshade", "haemophilia", "lethargy", "nausea", "scytherus", "unweavingbody"},
    head =
      {
        "blindness",
        "calcifiedskull",
        "concussion",
        "crushedthroat",
        "damagedhead",
        "dazzled",
        "deafness",
        "laceratedthroat",
        "mangledhead",
        "scalded",
        "skullfractures",
        "slashedthroat",
        "stuttering",
        "tonguetied",
      },
    epidermal =
      {"anorexia", "blindness", "deafness", "itching", "scalded", "slashedthroat", "stuttering"},
    smoke =
      {
        "aeon",
        "dazed",
        "deadening",
        "disloyalty",
        "hellsight",
        "manaleech",
        "slickness",
        "tension",
        "unweavingspirit",
      },
    health =
      {
        "crackedribs",
        "grievouswounds",
        "skullfractures",
        "torntendons",
        "wristfractures",
        "kkractlebrand",
        "latched",
      },
    writhe = {"bound", "daeggerimpale", "entangled", "impaled", "transfixation", "webbed"},
    calcite = {"pressure"},
    unknown =
      {
        "amnesia",
        "bloodfire",
        "cadmuscurse",
        "conflagration",
        "deepsleep",
        "enlightenment",
        "isolation",
        "mindclamp",
        "penitence",
        "weakenedmind",
      },
    kelp =
      {
        "asthma",
        "clumsiness",
        "healthleech",
        "hypochondria",
        "parasite",
        "sensitivity",
        "weariness",
      },
    caloric = {"frozen", "shivering"},
    tree =
      {
        "slickness",
        "agoraphobia",
        "claustrophobia",
        "loneliness",
        "masochism",
        "recklessness",
        "spiritburn",
        "tenderskin",
        "vertigo",
        "generosity",
        "indifference",
        "justice",
        "lovers",
        "pacified",
        "peace",
        "retribution",
        "timeloop",
        "brokenleftleg",
        "brokenrightleg",
        "aeon",
        "dazed",
        "deadening",
        "disloyalty",
        "hellsight",
        "manaleech",
        "tension",
        "whisperingmadness",
        "anorexia",
        "burning",
        "brokenleftarm",
        "brokenrightarm",
        "asthma",
        "clumsiness",
        "healthleech",
        "hypochondria",
        "parasite",
        "sensitivity",
        "weariness",
        "hypothermia",
        "itching",
        "addiction",
        "darkshade",
        "haemophilia",
        "lethargy",
        "nausea",
        "scytherus",
        "stuttering",
        "confusion",
        "dementia",
        "hallucinations",
        "hypersomnia",
        "paranoia",
        "selarnia",
        "depression",
        "dissonance",
        "dizziness",
        "epilepsy",
        "impatience",
        "insomnia",
        "shadowmadness",
        "shyness",
        "stupidity",
        "frozen",
        "shivering",
      },
    passive =
      {
        "paralysis",
        "slickness",
        "agoraphobia",
        "claustrophobia",
        "loneliness",
        "masochism",
        "recklessness",
        "spiritburn",
        "tenderskin",
        "vertigo",
        "generosity",
        "indifference",
        "justice",
        "lovers",
        "pacified",
        "peace",
        "retribution",
        "timeloop",
        "brokenleftleg",
        "brokenrightleg",
        "aeon",
        "dazed",
        "deadening",
        "disloyalty",
        "hellsight",
        "manaleech",
        "tension",
        "whisperingmadness",
        "anorexia",
        "burning",
        "brokenleftarm",
        "brokenrightarm",
        "asthma",
        "clumsiness",
        "healthleech",
        "hypochondria",
        "parasite",
        "sensitivity",
        "weariness",
        "hypothermia",
        "itching",
        "addiction",
        "darkshade",
        "haemophilia",
        "lethargy",
        "nausea",
        "scytherus",
        "stuttering",
        "confusion",
        "dementia",
        "hallucinations",
        "hypersomnia",
        "paranoia",
        "selarnia",
        "depression",
        "dissonance",
        "dizziness",
        "epilepsy",
        "impatience",
        "insomnia",
        "shadowmadness",
        "shyness",
        "stupidity",
        "frozen",
        "shivering",
      },
  }</script>
						<eventHandlerList />
					</Script>
				</ScriptGroup>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<VariablePackage>
		<HiddenVariables />
	</VariablePackage>
</MudletPackage>
